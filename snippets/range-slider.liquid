<div class="range_container">
    <div class="sliders_control">
        <input id="fromSlider" type="range" value="0" min="0" max="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' }}"/>
        <input id="toSlider" type="range" value="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.'  }}" min="0" max="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' }}"/>
    </div>
    <div class="flex justify-between items-center">
        <p class="block">Rango:</p>
        <div class="">
            <span data-min>{{ 0 | money }}</span>
            <span>-</span>
            <span data-max>{{ filter.range_max | money }}</span>
        </div>
    </div>
    <div class="form_control hidden">
        <div class="form_control_container">
            <div class="form_control_container__time">Min</div>
            <input
                class="field__input fromInput"
                name="{{ filter.min_value.param_name }}"
                id="Filter-{{ filter.label | escape }}-GTE"
                {%- if filter.min_value.value -%}
                  {%- if uses_comma_decimals -%}
                    value="{{ filter.min_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' }}"
                  {%- else -%}
                    value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"
                  {%- endif %}
                {%- endif -%}
                type="number"
                placeholder="0"
                min="0"
                {%- if uses_comma_decimals -%}
                  max="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' }}"
                {%- else -%}
                  max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                {% endif %}
              >
        </div>
        <div class="form_control_container">
            <div class="form_control_container__time">Max</div>
            <input
                class="field__input toInput"
                name="{{ filter.max_value.param_name }}"
                id="Filter-{{ filter.label | escape }}-LTE"
                {%- if filter.max_value.value -%}
                  {%- if uses_comma_decimals -%}
                    value="{{ filter.max_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' }}"
                  {%- else -%}
                    value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"
                  {%- endif %}
                {%- endif -%}
                type="number"
                min="0"
                {%- if uses_comma_decimals -%}
                  placeholder="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' }}"
                  max="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' }}"
                {%- else -%}
                  placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                  max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                {% endif %}
              >
        </div>
    </div>
</div>

<style>
    .range_container {
        display: flex;
        flex-direction: column;
        width: 100%;
      }
      
      .sliders_control {
        position: relative;
        min-height: 50px;
      }
      
      .form_control {
        position: relative;
        display: flex;
        justify-content: space-between;
        font-size: 24px;
        color: #635a5a;
      }
      
      input[type=range]::-webkit-slider-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        width: 11px;
        height: 11px;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #9D0616;
        cursor: pointer;
      }
      
      input[type=range]::-moz-range-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        width: 24px;
        height: 24px;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #9D0616;
        cursor: pointer;  
      }
      
      input[type=range]::-webkit-slider-thumb:hover {
        background: #f7f7f7;
      }
      
      input[type=range]::-webkit-slider-thumb:active {
        box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
        -webkit-box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
      }
      
      input[type="number"] {
        color: #8a8383;
        width: 50px;
        height: 30px;
        font-size: 20px;
        border: none;
      }
      
      input[type=number]::-webkit-inner-spin-button, 
      input[type=number]::-webkit-outer-spin-button {  
         opacity: 1;
      }
      
      input[type="range"] {
        -webkit-appearance: none; 
        appearance: none;
        height: 2px;
        width: 100%;
        position: absolute;
        background-color: #9D0616;
        pointer-events: none;
      }
      
      #fromSlider {
        height: 0;
        z-index: 1;
      }
</style>

<script>
    function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        fillSlider(fromInput, toInput, '#9D0616', '#9D0616', controlSlider);
        if (from > to) {
            fromSlider.value = to;
            fromInput.value = to;
        } else {
            fromSlider.value = from;
        }
    }
        
    function controlToInput(toSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        fillSlider(fromInput, toInput, '#9D0616', '#9D0616', controlSlider);
        setToggleAccessible(toInput);
        if (from <= to) {
            toSlider.value = to;
            toInput.value = to;
        } else {
            toInput.value = from;
        }
    }
    
    function controlFromSlider(fromSlider, toSlider, fromInput) {
      const [from, to] = getParsed(fromSlider, toSlider);
      fillSlider(fromSlider, toSlider, '#9D0616', '#9D0616', toSlider);
      if (from > to) {
        fromSlider.value = to;
        fromInput.value = to;
      } else {
        fromInput.value = from;
      }
    }
    
    function controlToSlider(fromSlider, toSlider, toInput) {
      const [from, to] = getParsed(fromSlider, toSlider);
      fillSlider(fromSlider, toSlider, '#9D0616', '#9D0616', toSlider);
      setToggleAccessible(toSlider);
      if (from <= to) {
        toSlider.value = to;
        toInput.value = to;
      } else {
        toInput.value = from;
        toSlider.value = from;
      }
    }
    
    function getParsed(currentFrom, currentTo) {
      const from = parseInt(currentFrom.value, 10);
      const to = parseInt(currentTo.value, 10);
      updateLabels(from, to);
      return [from, to];
    }

    function updateLabels(from, to){
        const min = document.querySelector('[data-min]');
        const max = document.querySelector('[data-max]');

        min.innerText = from.toLocaleString('es-CO', {
            style: 'currency',
            currency: 'COP',
        });
        max.innerText = to.toLocaleString('es-CO', {
            style: 'currency',
            currency: 'COP',
        });
    }
    
    function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
        const rangeDistance = to.max-to.min;
        const fromPosition = from.value - to.min;
        const toPosition = to.value - to.min;
        controlSlider.style.background = `linear-gradient(
          to right,
          ${sliderColor} 0%,
          ${sliderColor} ${(fromPosition)/(rangeDistance)*100}%,
          ${rangeColor} ${((fromPosition)/(rangeDistance))*100}%,
          ${rangeColor} ${(toPosition)/(rangeDistance)*100}%, 
          ${sliderColor} ${(toPosition)/(rangeDistance)*100}%, 
          ${sliderColor} 100%)`;
    }
    
    function setToggleAccessible(currentTarget) {
      const toSlider = document.querySelector('#toSlider');
      if (Number(currentTarget.value) <= 0 ) {
        toSlider.style.zIndex = 2;
      } else {
        toSlider.style.zIndex = 0;
      }
    }
    
    const fromSlider = document.querySelector('#fromSlider');
    const toSlider = document.querySelector('#toSlider');
    const fromInput = document.querySelector('.fromInput');
    const toInput = document.querySelector('.toInput');
    fillSlider(fromSlider, toSlider, '#9D0616', '#9D0616', toSlider);
    setToggleAccessible(toSlider);
    
    fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
    toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
    fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
    toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);
</script>